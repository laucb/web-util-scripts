#!/usr/bin/env ruby

require 'rubygems'
require 'mysql'
require 'optparse'
require 'ostruct'
require 'database_sleuth'

def fetch_args(args)
  options = OpenStruct.new
  options.options_table_only = false
  options.verbose = false
  options.show_only = false
  options.app_type = :wordpress
  
  ARGV.options do |opts|
    opts.banner = "Usage:  #{File.basename($PROGRAM_NAME)} [options]"

    opts.separator " "
    opts.separator "Specific options:"

    opts.on( "-a", "--all", "Optimize all tables with overhead." ) do
      options.options_table_only = false
    end

    opts.on( "-s", "--show-only", "Show wp_options tables with overhead. No optimization is done." ) do
      options.show_only = true
    end
    
    opts.on( "-S", "--show-all", "Show all tables with overhead. No optimization is done." ) do
      options.show_only = true
      options.options_table_only = false
    end

    opts.on( "-v", "--verbose", "Display more detailed information." ) do
      options.verbose = true
    end
    
    opts.separator " "
    opts.separator "Application Types:"
    
    opts.on( "--wp", "--wordpress", "Look for WordPress DB connection info.") do
      options.app_type = :wordpress
    end
    
    opts.on( "--drupal", "Look for Drupal DB connection info." ) do
      options.app_type = :drupal
    end
    
    opts.on( "--joomla", "Look for Joomla DB connection info." ) do
      options.app_type = :joomla
    end
    
    opts.on( "--phpbb", "Look for phpBB DB connection info." ) do
      options.app_type = :phpbb
    end
    
    opts.on( "--gallery", "Look for Gallery DB connection info." ) do
      options.app_type = :gallery
    end
    
    opts.on( "--zencart", "Look for ZenCart DB connection info." ) do
      options.app_type = :zencart
    end
    
    opts.on( "--mediawiki", "Look for MediaWiki DB connection info." ) do
      options.app_type = :mediawiki
    end

    opts.separator " "
    opts.separator "Misc:"

    opts.on( "-h", "--help", "Show this message." ) do
      puts opts
      exit
    end

    opts.separator " "

    begin
      opts.parse(args)
    rescue OptionParser::InvalidOption => e
      puts e
      puts opts
      exit(1)
    end
  end
  options
end

def verbose_puts(text)
  puts " v #{text}"
end

def verbose(text, verbose)
  verbose_puts(text) if verbose
end

def do_query(db, query, verbose)
  if verbose
    verbose_puts("EXECUTING: #{query}")
    output = db.query(query)
    verbose_puts("#{db.affected_rows} row(s) affected.")
    return output
  else
    return db.query(query)
  end
end

def optimize_tables!
  @@options ||= fetch_args(ARGV)
  
  df = DatabaseSleuth.new(@@options.app_type)
  df.find_db_info
  
  puts "Connect manually with:"
  puts "    #{df.manual_connection_string}\n\n"
  puts "Checking for tables with overhead..."
  
  begin
    verbose("Connecting to 'information_schema' database...", @@options.verbose)
    db = Mysql::new(df.dbhost, df.dbuser, df.dbpass, "information_schema")
    
    if @@options.options_table_only
      verbose("Checking wp_options tables only...", @@options.verbose)
      query = "select TABLE_NAME, DATA_FREE from TABLES where TABLE_SCHEMA = '#{df.dbname}' and DATA_FREE > 0 and TABLE_NAME like '%_options';"
      rows = do_query(db, query, @@options.verbose)
    else
      verbose("Checking all tables...", @@options.verbose)
      query = "select TABLE_NAME, DATA_FREE from TABLES where TABLE_SCHEMA = '#{df.dbname}' and DATA_FREE > 0 order by DATA_FREE desc;"
      rows = do_query(db, query, @@options.verbose)
    end
    
    if db.affected_rows == 0
      puts "    No table overhead was found."
    else
      tables = []
      output = []
      maxlen = rows.fetch_field.max_length
      rows.each do |table, overhead|
        tables << table
        output << "#{hr(table, maxlen+4)} >> #{hr(overhead.to_i)}" + (@@options.show_only ? "" : " ... optimized!")
      end
      
      unless @@options.show_only
        query = "optimize table `#{tables.join("`, `")}`;"
      
        verbose("Switching to use '#{df.dbname}' database...", @@options.verbose)
        db.select_db(df.dbname)
        do_query(db, query, @@options.verbose)
      end
      
      output.each { |s| puts s }
    end
  rescue Mysql::Error => e
    puts "        Error code: #{e.errno}"
    puts "     Error message: #{e.error}"
    puts "    Error SQLSTATE: #{e.sqlstate}" if e.respond_to?("sqlstate")
  ensure
    verbose("Closing database connection...", @@options.verbose)
    db.close if db
  end
end

def extract_value(line)
  line.split("'").at(3)
end

def hr(val, maxlen = nil)
  case val
  when Fixnum
    kb = val.to_f/1024.0
    return "%.0fB" % bytes = (kb*1024).to_i if kb < 1
    return "%.1fM" % mb = kb/1024.0 if kb > 1024
    return "%.0fK" % kb
  when String
    return "%#{maxlen||0}s" % val
  else
    "doh!"
  end
end

optimize_tables!
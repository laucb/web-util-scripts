#!/usr/bin/env ruby

require 'rubygems'
require 'mysql'
require 'optparse'
require 'ostruct'
require 'database_sleuth'

def fetch_args(args)
  options = OpenStruct.new
  options.verbose = false
  options.app_type = :wordpress
  
  ARGV.options do |opts|
    opts.banner = "Usage:  #{File.basename($PROGRAM_NAME)} [options]"

    opts.separator " "
    opts.separator "Specific options:"

    opts.on( "-v", "--verbose", "Display more detailed information." ) do
      options.verbose = true
    end

    opts.separator " "
    opts.separator "Misc:"

    opts.on( "-h", "--help", "Show this message." ) do
      puts opts
      exit
    end

    opts.separator " "

    begin
      opts.parse!(args)
    rescue OptionParser::InvalidOption => e
      puts e
      puts opts
      exit(1)
    end
  end
  options
end

def verbose_puts(text)
  puts " v #{text}"
end

def verbose(text, verbose)
  verbose_puts(text) if verbose
end

def do_query(db, query, verbose)
  if verbose
    verbose_puts("EXECUTING: #{query}")
    output = db.query(query)
    verbose_puts("#{db.affected_rows} row(s) affected.")
    return output
  else
    return db.query(query)
  end
end

def switch_theme!
  @@options ||= fetch_args(ARGV)
  
  @df = DatabaseSleuth.new(@@options.app_type)
  @df.find_db_info
  
  begin
    puts "Disabling current theme..."
    verbose("Connecting to '#{@df.dbname}' database...", @@options.verbose)
    db = Mysql::new(@df.dbhost, @df.dbuser, @df.dbpass, @df.dbname)
    
    verbose("Looking for theme...", @@options.verbose)
    query = "SELECT option_value from #{@df.dbtableprefix}options WHERE option_name='template';"
    rows = do_query(db, query, @@options.verbose)
  
    if db.affected_rows == 0
      puts "    No theme was found."
      exit
    else
      theme = nil
      rows.each do |template|
        theme = template
      end
      
      query = "SELECT option_value from #{@df.dbtableprefix}options WHERE option_name='current_theme';"
      rows = do_query(db, query, @@options.verbose)
      theme_name = nil
      rows.each do |name|
        theme_name = name
      end
      
      verbose("Switching to 'default' theme...", @@options.verbose)
      
      query = "UPDATE #{@df.dbtableprefix}options SET option_value='default' WHERE option_name='template' OR option_name='stylesheet';"
      do_query(db, query, @@options.verbose)
      
      query = "UPDATE #{@df.dbtableprefix}options SET option_value='WordPress Default' WHERE option_name='current_theme';"
      do_query(db, query, @@options.verbose)
      print "    Revert to the original theme? "
      revert = gets.chomp
    end
    
    if ["y","Y","yes"].include?(revert)
      puts "    * Reverting theme..."
      verbose("Switching to '#{theme}' theme...", @@options.verbose)
      
      query = "UPDATE #{@df.dbtableprefix}options SET option_value='#{theme}' WHERE option_name='template' OR option_name='stylesheet' OR option_name='current_theme';"
      do_query(db, query, @@options.verbose)
      
      query = "UPDATE #{@df.dbtableprefix}options SET option_value='#{theme_name}' WHERE option_name='current_theme';"
      do_query(db, query, @@options.verbose)
      
      puts "    * Theme now set to: '#{theme}'"
    else
      puts "    * Ok. Leaving the default theme in place."
    end
  rescue Mysql::Error => e
    puts "        Error code: #{e.errno}"
    puts "     Error message: #{e.error}"
    puts "    Error SQLSTATE: #{e.sqlstate}" if e.respond_to?("sqlstate")
  ensure
    verbose("Closing database connection...", @@options.verbose)
    db.close if db
  end
end

switch_theme!